{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["CurrentWeather","props","src","image","alt","description","App","useState","data","setData","loading","setLoading","search","setSearch","input","setInput","error","setError","handleFetch","a","fetch","process","response","console","log","status","Error","json","message","useEffect","setTimeout","className","onSubmit","event","preventDefault","type","name","placeholder","value","onChange","e","target","main","classname","weather","icon","Math","floor","temp","temp_max","temp_min","humidity","wind","speed","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAwGMA,EAAiB,SAACC,GACtB,OACE,8BACE,qBAAKC,IAAKD,EAAME,MAAOC,IAAKH,EAAMI,iBAKzBC,EA3GH,WACV,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA4BJ,mBAAS,cAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAA0BN,mBAAS,IAAnC,mBAAOO,EAAP,KAAcC,EAAd,KACA,EAA0BR,oBAAS,GAAnC,mBAAOS,EAAP,KAAcC,EAAd,KAEMC,EAAW,uCAAG,8BAAAC,EAAA,+EAEOC,MAAM,oDAAD,OAC0BR,EAD1B,qBAXlBS,mCAWkB,kBAFZ,UAEVC,EAFU,OAKhBC,QAAQC,IAAIF,GACY,MAApBA,EAASG,OANG,sBAOR,IAAIC,MAAM,mBAPF,uBASGJ,EAASK,OATZ,OASVnB,EATU,OAUhBC,EAAQD,GAVQ,kDAYhBS,EAAS,KAAIW,SAZG,0DAAH,qDAgBjBC,qBAAU,WACRX,IACAY,YAAW,WACTnB,GAAW,KACV,OACF,CAACC,IAgCJ,OAAIF,EAAgB,4CAChBM,EAEA,qCACE,wCACA,4BAAIA,OAIR,sBAAKe,UAAU,MAAf,UACE,uBAAMA,UAAU,SAASC,SAxCR,SAACC,GACpBA,EAAMC,iBACNrB,EAAUC,GACVC,EAAS,KAqCP,UACE,uBACEoB,KAAK,OACLC,KAAK,SACLC,YAAY,kBACZC,MAAOxB,EACPyB,SAAU,SAACC,GAAD,OAAOzB,EAASyB,EAAEC,OAAOH,UAErC,wBAAQH,KAAK,SAAb,uBAED3B,EAAKkC,MACJ,sBAAKX,UAAU,YAAf,UACE,qBAAIA,UAAU,OAAd,sBAA4BvB,EAAK4B,QACjC,cAAC,EAAD,CACEO,UAAU,QACVxC,MAhDqB,QAAzBK,EAAKoC,QAAQ,GAAGC,KACX,8CAC2B,QAAzBrC,EAAKoC,QAAQ,GAAGC,KAClB,8CAC2B,QAAzBrC,EAAKoC,QAAQ,GAAGC,KAClB,8CAC2B,QAAzBrC,EAAKoC,QAAQ,GAAGC,KAClB,8CAC2B,QAAzBrC,EAAKoC,QAAQ,GAAGC,KAClB,8CAC2B,QAAzBrC,EAAKoC,QAAQ,GAAGC,KAClB,8CAC2B,QAAzBrC,EAAKoC,QAAQ,GAAGC,KAClB,8CAC2B,QAAzBrC,EAAKoC,QAAQ,GAAGC,KAClB,8CAC2B,QAAzBrC,EAAKoC,QAAQ,GAAGC,KAClB,8CAEA,KA8BDxC,YAAaG,EAAKoC,QAAQ,GAAGvC,cAE/B,oBAAGsC,UAAU,OAAb,sBAA2BG,KAAKC,MAAMvC,EAAKkC,KAAKM,MAAhD,WACA,iDAAcF,KAAKC,MAAMvC,EAAKkC,KAAKO,UAAnC,WACA,iDAAcH,KAAKC,MAAMvC,EAAKkC,KAAKQ,UAAnC,WACA,8CAAc1C,EAAKkC,KAAKS,SAAxB,OACA,oBAAGpB,UAAU,OAAb,yBAAiCvB,EAAK4C,KAAKC,MAA3C,iBCrFKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3cc4239a.chunk.js","sourcesContent":["import \"./App.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nconst App = () => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [search, setSearch] = useState(\"Manchester\");\r\n  const [input, setInput] = useState(\"\");\r\n  const [error, setError] = useState(false);\r\n\r\n  const handleFetch = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://api.openweathermap.org/data/2.5/weather?q=${search},GB&appid=${API_KEY}&units=metric`\r\n      );\r\n      console.log(response);\r\n      if (response.status !== 200) {\r\n        throw new Error(\"Failed to fetch\");\r\n      }\r\n      const data = await response.json();\r\n      setData(data);\r\n    } catch (err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleFetch();\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 1000);\r\n  }, [search]);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setSearch(input);\r\n    setInput(\"\");\r\n  };\r\n\r\n  const getWeather = () => {\r\n    if (data.weather[0].icon === \"01d\") {\r\n      return \"http://openweathermap.org/img/wn/01d@2x.png\";\r\n    } else if (data.weather[0].icon === \"02d\") {\r\n      return \"http://openweathermap.org/img/wn/02d@2x.png\";\r\n    } else if (data.weather[0].icon === \"03d\") {\r\n      return \"http://openweathermap.org/img/wn/03d@2x.png\";\r\n    } else if (data.weather[0].icon === \"04d\") {\r\n      return \"http://openweathermap.org/img/wn/04d@2x.png\";\r\n    } else if (data.weather[0].icon === \"09d\") {\r\n      return \"http://openweathermap.org/img/wn/09d@2x.png\";\r\n    } else if (data.weather[0].icon === \"10d\") {\r\n      return \"http://openweathermap.org/img/wn/10d@2x.png\";\r\n    } else if (data.weather[0].icon === \"11d\") {\r\n      return \"http://openweathermap.org/img/wn/11d@2x.png\";\r\n    } else if (data.weather[0].icon === \"13d\") {\r\n      return \"http://openweathermap.org/img/wn/13d@2x.png\";\r\n    } else if (data.weather[0].icon === \"50d\") {\r\n      return \"http://openweathermap.org/img/wn/50d@2x.png\";\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  if (loading) return <h1>Loading...</h1>;\r\n  if (error)\r\n    return (\r\n      <>\r\n        <h1>Error.</h1>\r\n        <p>{error}</p>\r\n      </>\r\n    );\r\n  return (\r\n    <div className=\"app\">\r\n      <form className=\"submit\" onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"search\"\r\n          placeholder=\"Enter city name\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n      {data.main && (\r\n        <div className=\"container\">\r\n          <h2 className=\"city\">City: {data.name}</h2>\r\n          <CurrentWeather\r\n            classname=\"image\"\r\n            image={getWeather()}\r\n            description={data.weather[0].description}\r\n          />\r\n          <p classname=\"text\">Temp: {Math.floor(data.main.temp)}°C</p>\r\n          <p>Max Temp: {Math.floor(data.main.temp_max)}°C</p>\r\n          <p>Min Temp: {Math.floor(data.main.temp_min)}°C</p>\r\n          <p>Humidity: {data.main.humidity}%</p>\r\n          <p className=\"info\">Wind Speed: {data.wind.speed} KPH</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CurrentWeather = (props) => {\r\n  return (\r\n    <div>\r\n      <img src={props.image} alt={props.description}></img>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}